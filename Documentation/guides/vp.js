$(function() {
    registerGuide({ 
        name: 'VP',
        summary: 'A generic solution to save and visualize data with Unity',
		content: `
		<h1 class='page-heading'>VP</h1>
		
		<section>
			<span class='section-heading'>Unity Incremental Compiler</span>
			<p>
				The plugin is written using C# 7 syntax. This means that you must activate this option in Unity Editor.
				If you don't do this, Unity will not compile your project.
			</p>
			<p>
				To enable C# 7 syntax, go to 
				<a href='https://forum.unity.com/threads/unity-incremental-c-compiler.523993/'>this link</a>.
			</p>
		</section>

		<section>
			<span class='section-heading'>What is it?</span>
			<p>
				VP was created to help save, visualize and modify data in Unity game engine. 
				With VP the process of saving data is very simplified and fast.
			<p/>
			<p>
				I am always open to hearing new ideas for improvements or suggestions and of any problems 
				that you might encounter while using VP plugin.
			<p/>
			<p>
				You can email me any time at 
				<a href="mailto:mciissee@gmail.com?subject=Asset Store">
				mciissee@gmail.com
				</a> 
				and I will respond shortly.
			</p>
		</section>

		<section> 
			<span class='section-heading'>What is in the package?</span>
			<p>
				The plugin is fully installed at « Assets/InfinityEngine/Frameworks/VP » 
				with the following structure.
			</p>

			<p>
				<span class='section-subheading'>• InfinityEngine/Scripts</span>
				Contains the assemblies that hold the core code of the plugin.
			</p>

			<p>
				<span class='section-subheading'>• InfinityEngine/Frameworks/VP</span>
				Contains the scripts of the of VP plugin.
			</p>

			<p>
				<span class='section-subheading'>• InfinityEngine/Gen</span>
				Contains resources auto generated by the plugin. You cannot delete this folder and if you delete it, 
				the class VPEditor.Resolver will regenerate it again.
			</p>

			<p>
				<span class='section-subheading'>• <see cref='VP'/>.cs</span>
				Contains the core code of VP plugin.
			</p>
			<p>
				<span class='section-subheading'>• <see cref='VPEditor'/>.cs</span>
				Contains the code that creates the editor window that let you visualize edit your preferences. 
				The preferences that you create using the editor are usable at runtime and you 
				can share them between your projects (only the names of the preferences not the values).
			</p>
			<p>
				<span class='section-subheading'>• <see cref='R2'/>.cs</span>
				This script is regenerated by the plugin each time you edit your preferences using 
				the editor window.
				It works like android R class. It contains static references to all the preferences.
				This allows you to avoid using hardcoded strings in your projects and increase your 
				productivity.
			</p>
		</section>

		<section> 
			<span class='section-heading'>Getting Started</span>
			<p>
				First of all, to use the plugin, you have to import it from the assets 
				store and use the following directive in the head of your scripts :
			</p>

			<code>using InfinityEngine.Serialization;</code><br/>
			
			<p>
				<span class='section-subheading'>• How to save and load a preference?</span>
				<img src='images/VP/editor.png'/>
				VP class provides access to static methods which starts with the
				prefix « Set » like « <see cref='VP.SetInt(string, int)'/> » or the prefix « Get » 
				like « <see cref='VP.GetInt(string)'/>». <br/>
				Theses methods allow to save and load a preference represented by the class « VP.Pref<T> ».
			</p>
	
			<p>
				<span class='section-subheading'>Example :</span>
				The following code is an example of how to save and load an integer 
				preference identified by the key « score » : <br/>
				<code>
					VP.SetInt("score", 10); // creates new preference with the key 'score'
					VP.Save(); // Write the modification on disk.
					Debug.Log(VP.GetInt("score")); // print 10 on the console
				</code>
			</p>

			<p>
				<span class='section-subheading'>• How to visualze a preference?</span>

				1. Open the editor located at « Tools/Infinity Engine/Preferences/Editor ».<br/>
				2. Use the « Preferences » section to select the type of the preferences 
					that you want to visualize.<br/>
				3. Use the « Visualizer » section to edit or create your preferences.<br/>
				4. Click on the button « Regenerate R2 » to regenerate the script « <see cref='R2'/> ».<br/><br/>

				The purpose of the generated script is to avoid you to deal with preferences by using hardcoded strings. 
				If you use hardcoded strings, you could make some mistakes like a spelling mistake.<br/><br/> 
				
				<span class='section-subheading'>Example :</span>
				The following code sets the value of the preference 'score' created in the last example to 100.
				<code>
					// This code call automatically ‘SetInt’ method of VP class.
					R2.score.Value *= 10;
					VP.Save(); // Write the modification on disk.
				</code>				
			</p>

			<p>
				<span class='section-subheading'>• How to delete a data?</span>
			
				1. To delete a key, call the static method « <see cref='VP.DeleteKey(PrefTypes, string)'/> ». <br/>
				2. To delete all keys, call the static method « <see cref='VP.DeleteAll()'/> ». <br/>
				3. You can also use the editor to delete a key or all keys at « Tools/InfinityEngine/Preferences/Editor »
			</p>
		</section>

		<section>
			<span class='section-heading'>FAQ</span>
			
			<p>
				<span class='section-subheading'>• Where the data are saved?</span>
				The data are placed at <a href="https://docs.unity3d.com/ScriptReference/Application-persistentDataPath.html">
				Application.persistentDataPath</a> + visualPrefs.vp
			</p>

			<p>
				<span class='section-subheading'>• Will this work on all platform?</span>			
				The plugin has not been tested on all unity platforms,it has been tested and works perfectly on the platforms : <br/>
				<strong>Android, </strong>
				<strong>IOS, </strong>
				<strong>Standalone, </strong>
				<strong>and WebGL.</strong>

				The plugin should work on all other platforms but in case of problem, you can send me an email.
			</p>
		
			<p>
				<span class='section-subheading'>• Can the plugin serialize all types?</span>
				In the current version, the plugin saves only the types referenced 
				in the enumeration <see cref="PrefTypes"/>			
			</p>
			
			<p>
				<span class='section-subheading'>• Is R2 script regenerated after I create a preference during play mode ?</span>
				When you create a preference in script, it is not added to R2 class, 
				so the good way to use this plugin is to create your preferences
				using the editor then generate R2 class by using the editor.			
			</p>

			<p>
				<span class='section-subheading'>• Is the plugin auto save preferences ?</span>
				When you update a preference by calling the setters functions or 
				by using R2 class properties, the plugin does not write the modifications 
				on disk for performance purpose, you must the method <see cref='VP.Save()/>'. 
				If you edit a preference from the editor, the modifications are saved.
			</p>
		</section>

		<section>
			<span class='section-heading'>Final Words</span>
			<p>
				Thanks you if you purchased this asset, if not you can purchase it 
				at <a href="http://u3d.as/GLW">http://u3d.as/GLW</a>
			</p>
			<p>
				If you like the asset, please <a href="http://u3d.as/GLW">rate it.</a>
			</p>
			<p>
				Support is available at <a href="mailto:mciissee@gmail.com?subject=Asset Store">mciissee@gmail.com</a>
			</p>
			<p>
			Make sure you check out my other assets at my <a href="http://u3d.as/riS">assets store page.</a>
			</p>
		</section>`
	});
});